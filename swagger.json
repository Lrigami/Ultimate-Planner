{
    "openapi": "3.0.0",
    "info": {
        "title": "Ultimate Planner API",
        "description": "Ultimate Planner API",
        "version": "1.0.0"
    },
    "servers": {
        "url": "http://localhost:3000"
    },
    "paths": {
        "/auth": {
            "post": {
                "summary": "Create a new user",
                "tags": [
                "Authentication"
                ],
                "operationId": "createNewUser",
                "requestBody": {
                "description": "User registration data",
                "required": true,
                "content": {
                    "application/json": {
                    "schema": {
                        "$ref": "#/components/schemas/User"
                    }
                    }
                }
                },
                "responses": {
                "201": { "description": "User created successfully." },
                "500": { "description": "Internal server error." }
                }
            }
        },
        "/auth/{id}": {
            "get": {
                "summary": "Get user by ID",
                "tags": [
                "Authentication"
                ],
                "operationId": "getOneUser",
                "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": { "type": "string" }
                }
                ],
                "responses": {
                "200": { "description": "User found." },
                "404": { "description": "User not found." }
                }
            },
            "put": {
                "summary": "Update user",
                "tags": [
                "Authentication"
                ],
                "operationId": "updateUser",
                "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": { "type": "string" }
                }
                ],
                "requestBody": {
                "description": "User update data",
                "required": true,
                "content": {
                    "application/json": {
                    "schema": { "$ref": "#/components/schemas/User" }
                    }
                }
                },
                "responses": {
                "201": { "description": "User updated successfully." },
                "404": { "description": "User not found." }
                }
            },
            "delete": {
                "summary": "Delete user",
                "tags": [
                "Authentication"
                ],
                "operationId": "deleteUser",
                "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": { "type": "string" }
                }
                ],
                "responses": {
                "200": { "description": "User deleted successfully." },
                "404": { "description": "User not found." }
                }
            }
        },
        "/auth/login": {
            "post": {
                "summary": "User login",
                "tags": [
                "Authentication"
                ],
                "operationId": "login",
                "requestBody": {
                "description": "User credentials",
                "required": true,
                "content": {
                    "application/json": {
                    "schema": {
                        "type": "object",
                        "properties": {
                        "email": { "type": "string", "format": "email" },
                        "password": { "type": "string", "format": "password" }
                        }
                    }
                    }
                }
                },
                "responses": {
                "200": {
                    "description": "Login successful.",
                    "content": {
                    "application/json": {
                        "schema": {
                        "type": "object",
                        "properties": {
                            "token": { "type": "string" }
                        }
                        }
                    }
                    }
                },
                "401": { "description": "Invalid credentials." }
                }
            }
        },
        "/auth/emailverif": {
            "post": {
                "summary": "Verify email",
                "tags": [
                "Authentication"
                ],
                "operationId": "verifyEmail",
                "requestBody": {
                "description": "Email verification request",
                "required": true,
                "content": {
                    "application/json": {
                    "schema": { "$ref": "#/components/schemas/EmailVerification" }
                    }
                }
                },
                "responses": {
                "200": { "description": "Email verified successfully." },
                "404": { "description": "Email doesn't exist." }
                }
            }
        },
        "/auth/forgotpassword": {
            "post": {
                "summary": "Request password reset",
                "tags": [
                "Password"
                ],
                "operationId": "forgotPassword",
                "requestBody": {
                "description": "Email for password reset",
                "required": true,
                "content": {
                    "application/json": {
                    "schema": {
                        "type": "object",
                        "properties": {
                        "email": { "type": "string", "format": "email" }
                        }
                    }
                    }
                }
                },
                "responses": {
                "200": { "description": "Password reset email sent." },
                "400": { "description": "Invalid email." }
                }
            }
        },
        "/auth/resetpassword/{token}": {
            "post": {
                "summary": "Reset password",
                "tags": [
                "Password"
                ],
                "operationId": "resetPassword",
                "parameters": [
                {
                    "name": "token",
                    "in": "path",
                    "required": true,
                    "schema": { "type": "string" }
                }
                ],
                "requestBody": {
                "description": "New password",
                "required": true,
                "content": {
                    "application/json": {
                    "schema": {
                        "type": "object",
                        "properties": {
                        "password": { "type": "string", "format": "password" }
                        }
                    }
                    }
                }
                },
                "responses": {
                "200": { "description": "Password reset successful." },
                "400": { "description": "Invalid token or password." }
                }
            }
        }, 
        "/todolist": {
            "post": {
            "summary": "Create a new to-do list",
            "tags": [
                "To do list"
                ],
            "operationId": "createNewList",
            "requestBody": {
                "description": "To-do list data",
                "required": true,
                "content": {
                "application/json": {
                    "schema": {
                    "$ref": "#/components/schemas/TodoList"
                    }
                }
                }
            },
            "responses": {
                "201": { "description": "List created successfully." },
                "500": { "description": "Internal server error." }
            }
            },
            "get": {
            "summary": "Get all to-do lists",
            "tags": [
                "To do list"
                ],
            "operationId": "readAllLists",
            "responses": {
                "200": { "description": "Lists retrieved successfully." },
                "500": { "description": "Internal server error." }
            }
            }
        },
        "/todolist/{tdlid}": {
            "get": {
            "summary": "Get a to-do list by ID",
            "tags": [
                "To do list"
                ],
            "operationId": "readOneList",
            "parameters": [
                {
                "name": "tdlid",
                "in": "path",
                "required": true,
                "schema": { "type": "string" }
                }
            ],
            "responses": {
                "200": { "description": "List found." },
                "404": { "description": "List not found." }
            }
            },
            "put": {
            "summary": "Update a to-do list",
            "tags": [
                "To do list"
                ],
            "operationId": "updateList",
            "parameters": [
                {
                "name": "tdlid",
                "in": "path",
                "required": true,
                "schema": { "type": "string" }
                }
            ],
            "requestBody": {
                "description": "Updated list data",
                "required": true,
                "content": {
                "application/json": {
                    "schema": { "$ref": "#/components/schemas/TodoList" }
                }
                }
            },
            "responses": {
                "201": { "description": "List updated successfully." },
                "404": { "description": "List not found." }
            }
            },
            "delete": {
            "summary": "Delete a to-do list",
            "tags": [
                "To do list"
                ],
            "operationId": "deleteList",
            "parameters": [
                {
                "name": "tdlid",
                "in": "path",
                "required": true,
                "schema": { "type": "string" }
                }
            ],
            "responses": {
                "200": { "description": "List deleted successfully." },
                "404": { "description": "List not found." }
            }
            }
        },
        "/todolist/{tdlid}/total": {
            "get": {
            "summary": "Count total tasks in a to-do list",
            "tags": [
                "Count tasks"
                ],
            "operationId": "countTasks",
            "parameters": [
                {
                "name": "tdlid",
                "in": "path",
                "required": true,
                "schema": { "type": "string" }
                }
            ],
            "responses": {
                "200": { "description": "Total tasks counted successfully." },
                "404": { "description": "List not found." }
            }
            }
        },
        "/todolist/{tdlid}/done": {
            "get": {
            "summary": "Count completed tasks in a to-do list",
            "tags": [
                "Count tasks"
                ],
            "operationId": "countDoneTasks",
            "parameters": [
                {
                "name": "tdlid",
                "in": "path",
                "required": true,
                "schema": { "type": "string" }
                }
            ],
            "responses": {
                "200": { "description": "Completed tasks counted successfully." },
                "404": { "description": "List not found." }
            }
            }
        }, 
        "/todolist/{tdlid}/tasks": {
            "post": {
                "summary": "Create a new task",
                "tags": [
                "Tasks"
                ],
                "parameters": [
                {
                    "name": "tdlid",
                    "in": "path",
                    "required": true,
                    "schema": { "type": "string" }
                }
                ],
                "requestBody": {
                "required": true,
                "content": {
                    "application/json": {
                    "schema": {
                        "$ref": "#/components/schemas/Task"
                    }
                    }
                }
                },
                "responses": {
                "201": { "description": "Task created successfully" },
                "500": { "description": "Server error" }
                }
            },
            "get": {
                "summary": "Get all tasks from a to-do list",
                "tags": [
                "Tasks"
                ],
                "parameters": [
                {
                    "name": "tdlid",
                    "in": "path",
                    "required": true,
                    "schema": { "type": "string" }
                }
                ],
                "responses": {
                "200": { "description": "List returned successfully" },
                "500": { "description": "Server error" }
                }
            }
        },
        "/todolist/{tdlid}/tasks/{id}": {
            "get": {
                "summary": "Get a specific task",
                "tags": [
                "Tasks"
                ],
                "parameters": [
                { "name": "tdlid", "in": "path", "required": true, "schema": { "type": "string" } },
                { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
                ],
                "responses": {
                "200": { "description": "Task returned successfully" },
                "404": { "description": "Task not found" },
                "500": { "description": "Server error" }
                }
            },
            "put": {
                "summary": "Update a task",
                "tags": [
                "Tasks"
                ],
                "parameters": [
                { "name": "tdlid", "in": "path", "required": true, "schema": { "type": "string" } },
                { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
                ],
                "requestBody": {
                "required": true,
                "content": {
                    "application/json": {
                    "schema": {
                        "$ref": "#/components/schemas/Task"
                    }
                    }
                }
                },
                "responses": {
                "201": { "description": "Task updated successfully" },
                "404": { "description": "Task not found" },
                "500": { "description": "Server error" }
                }
            },
            "delete": {
                "summary": "Delete a task",
                "tags": [
                "Tasks"
                ],
                "parameters": [
                { "name": "tdlid", "in": "path", "required": true, "schema": { "type": "string" } },
                { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
                ],
                "responses": {
                "200": { "description": "Task deleted successfully" },
                "404": { "description": "Task not found" },
                "500": { "description": "Server error" }
                }
            }
        },
        "/todolist/{tdlid}/tasks/filter": {
            "post": {
                "summary": "Filter tasks",
                "tags": [
                "Tasks"
                ],
                "parameters": [
                {
                    "name": "tdlid",
                    "in": "path",
                    "required": true,
                    "schema": { "type": "string" }
                }
                ],
                "requestBody": {
                "required": true,
                "content": {
                    "application/json": {
                    "schema": {
                        "type": "object",
                        "properties": {
                        "priority": { "type": "array", "items": { "type": "string" } },
                        "operator": { "type": "string", "enum": ["AND", "OR"] },
                        "duedate": { "type": "array", "items": { "type": "string" } }
                        }
                    }
                    }
                }
                },
                "responses": {
                "201": { "description": "Filtered tasks returned successfully" },
                "404": { "description": "No task found" },
                "500": { "description": "Server error" }
                }
            }
        }, 
        "/enums/kanban": {
            "get": {
                "summary": "Get all Kanban categories",
                "operationId": "getAllKanban",
                "tags": [
                "Enums"
                ],
                "responses": {
                "200": {
                    "description": "List of all Kanban categories",
                    "content": {
                    "application/json": {
                        "schema": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": "to-do"
                        }
                        }
                    }
                    }
                },
                "400": {
                    "description": "No Kanban categories found",
                    "content": {
                    "application/json": {
                        "schema": {
                        "type": "object",
                        "properties": {
                            "message": {
                            "type": "string",
                            "example": "No kanban categories found."
                            }
                        }
                        }
                    }
                    }
                },
                "500": {
                    "description": "Internal server error",
                    "content": {
                    "application/json": {
                        "schema": {
                        "type": "object",
                        "properties": {
                            "message": {
                            "type": "string",
                            "example": "Internal server error message"
                            }
                        }
                        }
                    }
                    }
                }
                }
            }
        },
        "/enums/priority": {
            "get": {
                "summary": "Get all priority levels",
                "operationId": "getAllPriority",
                "tags": [
                "Enums"
                ],
                "responses": {
                "200": {
                    "description": "List of all priority levels",
                    "content": {
                    "application/json": {
                        "schema": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": "high"
                        }
                        }
                    }
                    }
                },
                "400": {
                    "description": "No priority categories found",
                    "content": {
                    "application/json": {
                        "schema": {
                        "type": "object",
                        "properties": {
                            "message": {
                            "type": "string",
                            "example": "No priority categories found."
                            }
                        }
                        }
                    }
                    }
                },
                "500": {
                    "description": "Internal server error",
                    "content": {
                    "application/json": {
                        "schema": {
                        "type": "object",
                        "properties": {
                            "message": {
                            "type": "string",
                            "example": "Internal server error message"
                            }
                        }
                        }
                    }
                    }
                }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "User": {
                "type": "object",
                "properties": {
                "email": { "type": "string", "format": "email" },
                "password": { "type": "string", "format": "password" }
                }
            },
            "EmailVerification": {
                "type": "object",
                "properties": {
                "email": { "type": "string", "format": "email" }
                }
            },
            "TodoList": {
                "type": "object",
                "properties": {
                "title": { "type": "string" },
                "pinned": { "type": "boolean" },
                "color": { "type": "string" }
                }
            }, 
            "Task": {
                "type": "object",
                "properties": {
                    "title": { 
                        "type": "string", 
                        "description": "The title of the task" 
                    },
                    "description": { 
                        "type": "string", 
                        "description": "A detailed description of the task" 
                    },
                    "due_date": { 
                        "type": "string", 
                        "format": "date", 
                        "description": "The due date of the task"
                    },
                    "priority": { 
                        "type": "string", 
                        "description": "Priority level of the task (e.g., high, medium, low)"
                    },
                    "kanban_category": { 
                        "type": "string", 
                        "description": "The Kanban category of the task (e.g., to-do, in-progress, done)"
                    },
                    "done": { 
                        "type": "boolean", 
                        "description": "Indicates if the task is completed"
                    }
                },
                "required": ["title"]
            }
        }
    }
}